services:
  postgresql:
    container_name: postgresql
    image: postgres:alpine
    restart: unless-stopped
    networks:
      - api-auth
    deploy:
      resources:
        limits:
          cpus: 0.25
          memory: "128M"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgrespw
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  jaeger:
    container_name: jaeger
    image: jaegertracing/all-in-one:latest
    networks:
      - api-auth
    deploy:
      resources:
        limits:
          cpus: 0.25
          memory: "64M"
    ports:
      - "16686:16686" # Jaeger UI
      - "14268:14268" # Receive legacy OpenTracing traces, optional
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver, not yet used by Quarkus, optional
      - "14250:14250" # Receive from external otel-collector, optional
    environment:
      COLLECTOR_OTLP_ENABLED: true

  frontend:
    container_name: frontend
    image: app/frontend
    build:
      context: ./authentication_page_service
      dockerfile: Dockerfile
    restart: unless-stopped
    networks:
      - api-auth
    ports:
      - "3000:3000"

  password_encryption:
    container_name: pwd
    image: app/hashing-salting
    build:
      context: ./hashing_service
      dockerfile: Dockerfile
    restart: unless-stopped
    networks:
      - api-auth
    deploy:
      resources:
        limits:
          cpus: 0.15
          memory: "32M"
    environment:
      RUST_BACKTRACE: 1
      OTLP_ENDPOINT: http://jaeger:4317
      PORT: "8820"
    ports:
      - "8820:8820"

  jwt_auth:
    container_name: jwt_auth
    build:
      context: ./jwt_authentication_service
      dockerfile: ./src/main/docker/Dockerfile
    restart: unless-stopped
    networks:
      - api-auth
    environment:
      DB_USERNAME: postgres
      DB_PASSWORD: postgrespw
      DB_HOST: postgresql
      SALT_SERVICE: http://pwd:8820
      OTLP_ENDPOINT: http://jaeger:4317
    ports:
      - "8810:8810"
    depends_on:
      - postgresql
      - password_encryption

networks:
  api-auth:

volumes:
  postgres_data: